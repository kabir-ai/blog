{
  
    
        "post0": {
            "title": "Image processing on 64bit system",
            "content": "Summary . Fast image processing is important to efficiently research and deploy computer vision models. During my research, i found that Jeremy Howard (creator of fastai and highly admired) uses Pillow-SIMD ( a more effiecient version of Pillow library). Furthermore, the awesome Pytorch library uses pillow. So, I set to do a small experiment to compare OpenCV, which is my standard go to library for image processing with Pillow-SIMD. . I have made this comparison on a 64 bit system since they are more capable and tend to be used more often in high computational systems. . Summary results based on average of 100 runs . loading : OpenCV is 34.0 times slower than PillowSIMD | flipping : OpenCV is 1.32 times faster than PillowSIMD | resizing : OpenCV is 1.34 times faster than PillowSIMD | blurring : OpenCV is 2.42 times faster than PillowSIMD | rotation : OpenCV is 1.74 times slower than PillowSIMD | Ill add more operations shortly . The OpevCV library in signifcantly slower while loading images which is perhaps the reason why Jeremy Howard and Pytorch use Pillow. . Code and Analysis below . import PIL import cv2 import matplotlib.pyplot as plt import numpy as np . Checking the versions of OpenCV and Pillow-SIMD . #collapse-hide print(f&quot;OpenCV version is : {cv2.__version__}&quot;) print(f&quot;Pillow-SIMD version is : {PIL.__version__}&quot;) . . OpenCV version is : 4.1.2 Pillow-SIMD version is : 7.0.0.post3 . the post3 in the version number 7.0.0 implies SIMD installation . Checking system architecture . print(f&quot;The platform architecture is : {platform.architecture()}&quot;) . The platform architecture is : (&#39;64bit&#39;, &#39;&#39;) . We need to make sure that the &#39;libjpeg_turbo&#39;is being used instead of &#39;libjpeg&#39; library. libjpeg-turbo replacement for libjpeg is optimized for SIMD. . from PIL import features; print(features.check_feature(&#39;libjpeg_turbo&#39;)) . True . from PIL import Image, ImageOps, ImageFilter . Since, everyone&#39;s favorite Monalisa has been holding the same selfie pose since possibly 1503, i thought of introducing her to a few transformations . Loading Monalisa . Pillow-SIMD . %%timeit -n 100 image_pil = Image.open(image_location) . 627 µs ± 96 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(image_pil) plt.show() . OpenCV . %%timeit -n 100 image_cv2 = cv2.imread(image_location) . 21.1 ms ± 472 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(image_cv2) plt.show() . Flipping Monalisa . Pillow-SIMD . %%timeit -n 100 flipped_pil_image = ImageOps.flip(image_pil) . 777 µs ± 146 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(flipped_pil_image) plt.show() . OpenCV . %%timeit -n 100 flipped_cv2_image = cv2.flip(image_cv2,0) . 590 µs ± 121 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(flipped_cv2_image) plt.show() . Resizing Monalisa . Pillow-SIMD . %%timeit -n 100 resized_pil = image_pil.resize((1600,2384)) # original (800, 1192) . 16.1 ms ± 343 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(resized_pil) plt.show() . OpenCV . %%timeit -n 100 resized_cv2 = cv2.resize(image_cv2,None,fx=2, fy=2) . 12 ms ± 403 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(resized_cv2) plt.show() . Blurring Monalisa . Pillow-SIMD . %%timeit -n 100 blurred_pil = image_pil.filter(ImageFilter.BoxBlur(20)) . 10.5 ms ± 182 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(blurred_pil) plt.show() . OpenCV . %%timeit -n 100 blurred_cv2 = cv2.blur(image_cv2,(20,20)) . 4.34 ms ± 142 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . fig = plt.figure(figsize=(10,10)) plt.imshow(blurred_cv2) plt.show() . Rotating Monalisa . Pillow-SIMD . image_pil_array = np.asarray(Image.open(image_location)) . %%timeit -n 100 rotated_pil = image_pil.rotate(-90,expand=True) . 3.4 ms ± 145 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . rotated_pil = image_pil.rotate(-90,expand=True) . fig = plt.figure(figsize=(10,10)) plt.imshow(rotated_pil) plt.show() . OpenCV . %%timeit -n 100 rotated_cv2 = cv2.rotate(image_cv2,cv2.ROTATE_90_CLOCKWISE) . 5.93 ms ± 244 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . rotated_cv2 = cv2.rotate(image_cv2,cv2.ROTATE_90_CLOCKWISE) . fig = plt.figure(figsize=(10,10)) plt.imshow(rotated_cv2) plt.show() .",
            "url": "https://random-tree.github.io/blog/jupyter/image%20processing/opencv/2020/05/15/OpenCVvsPillowSIMD.html",
            "relUrl": "/jupyter/image%20processing/opencv/2020/05/15/OpenCVvsPillowSIMD.html",
            "date": " • May 15, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". I am a passionate machine learning engineer who enjoys generating insights from data, building and deploying machine learning models . Hopefully the work shared via this blog will be useful to the community. .",
          "url": "https://random-tree.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://random-tree.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}